Чат: можно зарегистрироваться, уникальные имена, есть логин и пароль, в чате есть возможность создавать комнаты, заходить в них, выходить из них, банить людей и добавлять людей в личный чёрный список (чтобы не видеть их сообщений). Сообщения в комнате распространяются на всех.
В итоге нужен список вопросов и ТЗ для Junior.

Сущности:
Чат
Пользователь
Комната
Сообщение

Язык программирования: Go
База данных: PostgreSQL (можно MySQL)

Для создания чата следует использовать протокол WebSocket

Есть основная комната, в которую заходят все пользователи. Чтобы писать сообщения, нужно зарегистрироваться (или авторизоваться, если пользователь уже зарегистрирован). Из общей комнаты можно перейти в другую либо создать свою.

Возможные действия:
	Зарегистрироваться
	Авторизоваться/Выйти
	Написать сообщение
	Создать комнату/Удалить комнату
	Присоединиться к комнате/Выйти из комнаты
	Пригласить пользователя в комнату
	Запретить человеку доступ в комнату (по логину, это может сделать владелец комнаты)
	Добавить человека в личный чёрный список (чтобы не видеть его сообщений)

// Определиться с механизмом (?)
// Описать взаимодействия (к примеру, как реализовать комнаты)
// Нужно описание не только структуры базы данных

Механизм чата
	Чтобы войти в другую комнату, нужно выйти из предыдущей (если это не общая комната). Пользователь не может одновременно находиться в нескольких комнатах
	Войти в комнату из общей можно с помощью команды enter room_name
	Выйти из комнаты можно с помощью команды exit room_name. Явно указывать название комнаты нужно, чтобы исключить случайный выход
	По умолчанию все сообщения в комнате видны всем находящимся в ней
	Чтобы отправить личное сообщение другому пользователю, перед этим сообщением следует написать private %username%, где %username% — это имя адресата. Отправить личное сообщение можно только пользователю, находящемуся с отправителем в одной комнате (общей или частной)

Реализация комнат
	Когда пользователь вводит команду enter room_name, название room_name ищется в базе данных. Если совпадение найдено (и пользователь не находится в чёрном списке этой комнаты), то пользователь входит в комнату и может видеть сообщения других пользователей, находящихся в ней, и писать сообщения. Если же его там нет, комната создаётся, а пользователь становится владельцем комнаты. Когда владелец покидает комнату, она удаляется (возможно, это не очень логично, подумать над этим)
	Для каждой комнаты создаётся отдельное WebSocket-соединение
	Пока в комнате есть хотя бы один пользователь, она существует. Когда все пользователи выходят из комнаты, она удаляется (а вместе с ней — и соединение)
	Общая комната существует всегда, пока запущена программа
	Владелец комнаты может запретить отдельному пользователю читать и писать в ней сообщения при помощи команды ban %username%. После выполнения команды (и её подтверждения) пользователя принудительно выбрасывает из комнаты и он больше не сможет в неё зайти

Структура БД

users
--
id 				int
login			varchar(100)
password_hash   varchar(32)
black_list_id	int


user_black_lists
--
id 				int
user_id			int
banned_user_id	int


room
--
id				int
name			varchar(50)
creator_id		int
black_list_id	int


room_black_lists
--
id 				int
banned_user_id	int


message
--
id		  		int
content			varchar(1000)
room_id			int
author_id 		int
